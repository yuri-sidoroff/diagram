{"version":3,"sources":["serviceWorker.js","utils/Providers.jsx","hooks/useOnClickOutside.js","context/DiagramContext.js","pages/Diagram/TextEditField.jsx","pages/Diagram/DragBlock.jsx","pages/Diagram/index.jsx","state/DiagramState.js","providers/DiagramProvider.jsx","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Providers","components","children","isEmpty","reverse","reduce","sum","Provider","useOnClickOutside","ref","func","useEffect","listener","e","current","contains","target","document","addEventListener","removeEventListener","createContext","undefined","useStyles","makeStyles","theme","lineWrapper","display","width","minWidth","spacing","inputStyle","flex","fontSize","color","palette","common","black","padding","backgroundColor","white","borderRadius","inputBaseRoot","textFieldWrapper","textFieldStyle","lineHeight","wordBreak","lineSize","actionButtons","position","bottom","colorLineButton","colors","deleteLineButton","connectorWrapper","alignItems","connector","height","grey","borderTopLeftRadius","borderBottomLeftRadius","cursor","deleteLine","inputColor","border","justifyContent","opacity","inputColorIcon","inputColorWrapper","flexDirection","flexWrap","inputColorIconUnchanged","observer","text","line","answerId","blockId","deleteHandler","changeColor","extendedClass","classes","diagramState","useContext","DiagramContext","lineAddMode","setLineAddMode","lines","setAnswerText","setHeaderText","startAddingLine","setLineColor","clearLineColor","useState","editMode","setEditMode","actionMode","setActionMode","deleteLineMode","setDeleteLineMode","anchorEl","setAnchorEl","useTheme","refBlock","useRef","refInput","handleCloseChangeColor","openChangeColor","idChangeColor","focus","Box","className","clsx","onMouseOver","onMouseLeave","InputBase","inputRef","multiline","rowsMax","input","value","onChange","event","textEdit","onKeyDown","keyCode","shiftKey","preventDefault","onDoubleClick","Typography","right","IconButton","id","onClick","currentTarget","ColorLens","Delete","onMouseDown","find","item","fromId","onMouseUp","onMouseEnter","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Paper","RadioGroup","Object","keys","filter","map","Radio","key","checkedIcon","DoneOutline","icon","style","blockWrapper","maxWidth","maxHeight","zIndex","answerStyle","borderTop","borderLeft","borderBottom","minHeight","marginBottom","paddingLeft","headerStyle","borderTopRightRadius","bodyStyle","paddingTop","otherField","addNewLineButton","left","borderBottomRightRadius","parentRef","zoomValue","setHeightBlock","setWidthBlock","setHeightParentRef","setWidthParentRef","blockRef","headerRef","bodyRef","blocks","lineFromBlockId","clearLine","addLine","setPositionBlock","setPositionsInBlock","addNewAnswer","deleteAnswer","changeColorAnswer","changeColorHeader","deleteBlock","isDrag","setIsDrag","x","y","clientHeight","answers","length","defaultPosition","bounds","top","onDrag","pos","clientWidth","handle","scale","onStart","onStop","draggingBlock","header","AddCircleOutlined","values","rootWrapper","divider","wrapper","margin","overflow","diagramField","diagramCanvas","infoWrapper","addBlockButton","boxRef","wrapperRef","addNewBlock","setPositionLine","widthBlock","heightBlock","moveMode","setMoveMode","setZoomValue","setSizeBlock","button","onMouseMove","movementX","movementY","scrollLeft","scrollTop","zoom","onWheel","deltaY","toFixed","points","toId","tension","stroke","Tooltip","title","Date","now","AddBox","DiagramState","action","bound","this","inPosition","mode","lineFromAnswerId","push","getElementById","forEach","answer","xPos","yPos","slice","acc","observable","computed","data","useLocalStore","App","BrowserRouter","Switch","DiagramProvider","exact","path","component","Diagram","from","to","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ee27c5a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { isEmpty, reverse } from 'lodash';\n\nconst Providers = ({ components, children }) => {\n    if (isEmpty(components)) return children;\n    return reverse(components)\n        .reduce((sum, Provider) => <Provider>{sum}</Provider>, children);\n};\n\nexport default Providers;\n","import { useEffect } from 'react';\n\nconst useOnClickOutside = (ref, func) => {\n    useEffect(() => {\n        const listener = (e) => {\n            if (!ref.current || ref.current.contains(e.target)) return;\n            func(e);\n        };\n        document.addEventListener('mousedown', listener);\n        document.addEventListener('touchstart', listener);\n        return () => {\n            document.removeEventListener('mousedown', listener);\n            document.removeEventListener('touchstart', listener);\n        };\n    }, [ref, func]);\n};\n\nexport default useOnClickOutside;\n","import { createContext } from 'react';\n\nexport default createContext(undefined);\n","import React, {\n    createRef, useContext, useEffect, useRef, useState,\n} from 'react';\nimport {\n    Box, Paper, Typography, InputBase, IconButton, Popover, Radio, RadioGroup,\n} from '@material-ui/core';\nimport { Delete, ColorLens, DoneOutline } from '@material-ui/icons';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport * as colors from '@material-ui/core/colors';\nimport { observer } from 'mobx-react';\nimport clsx from 'clsx';\nimport useOnClickOutside from '../../hooks/useOnClickOutside';\nimport DiagramContext from '../../context/DiagramContext';\n\nconst useStyles = makeStyles((theme) => ({\n    lineWrapper: {\n        display: 'flex',\n        width: '100%',\n        minWidth: theme.spacing(36),\n    },\n    inputStyle: {\n        flex: 1,\n        width: '100%',\n        fontSize: 'small',\n        color: theme.palette.common.black,\n        padding: theme.spacing(0.5),\n        backgroundColor: theme.palette.common.white,\n        borderRadius: theme.spacing(0.5),\n    },\n    inputBaseRoot: {\n        padding: 0,\n        '&::-webkit-scrollbar': {\n            width: theme.spacing(0.75),\n        },\n        '&::-webkit-scrollbar-thumb': {\n            backgroundColor: '#BEBEBE',\n            borderRadius: theme.spacing(0.5),\n        },\n    },\n    textFieldWrapper: {\n        flex: 1,\n    },\n    textFieldStyle: {\n        flex: 1,\n        fontSize: 'small',\n        lineHeight: 1.2,\n        padding: theme.spacing(0.5),\n        wordBreak: 'break-word',\n    },\n    lineSize: {\n        minWidth: theme.spacing(33),\n    },\n    actionButtons: {\n        position: 'absolute',\n        bottom: 0,\n    },\n    colorLineButton: {\n        padding: theme.spacing(0.5),\n        color: colors.blue[700],\n    },\n    deleteLineButton: {\n        padding: theme.spacing(0.5),\n        color: colors.red[700],\n    },\n    connectorWrapper: {\n        display: 'flex',\n        width: theme.spacing(1),\n        alignItems: 'center',\n    },\n    connector: {\n        height: theme.spacing(1.5),\n        width: '100%',\n        backgroundColor: theme.palette.grey[700],\n        borderTopLeftRadius: theme.spacing(1),\n        borderBottomLeftRadius: theme.spacing(1),\n        cursor: 'pointer',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[600],\n        },\n    },\n    deleteLine: {\n        backgroundColor: colors.deepOrange[700],\n    },\n    inputColor: {\n        color: theme.palette.common.white,\n        width: theme.spacing(3),\n        border: `1px solid ${theme.palette.common.white}`,\n        height: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 0,\n        '&:hover': {\n            opacity: 0.9,\n        },\n    },\n    inputColorIcon: {\n        color: theme.palette.common.white,\n        '&:hover': {\n            opacity: 0.9,\n        },\n    },\n    inputColorWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        width: theme.spacing(33),\n    },\n    inputColorIconUnchanged: {\n        width: '100%',\n        height: '100%',\n        '&:hover': {\n            opacity: 0.9,\n        },\n    },\n}));\n\nfunction TextEditField({\n    text,\n    line = false,\n    answerId,\n    blockId,\n    color,\n    deleteHandler,\n    changeColor,\n    extendedClass,\n}) {\n    const classes = useStyles();\n    const diagramState = useContext(DiagramContext);\n    const {\n        lineAddMode,\n        setLineAddMode,\n        lines,\n        setAnswerText,\n        setHeaderText,\n        startAddingLine,\n        setLineColor,\n        clearLineColor,\n        deleteLine,\n    } = diagramState;\n    const [editMode, setEditMode] = useState(false);\n    const [actionMode, setActionMode] = useState(false);\n    const [deleteLineMode, setDeleteLineMode] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const theme = useTheme();\n    const refBlock = useRef();\n    const refInput = useRef();\n\n    const handleTextEdit = (textEdit) => {\n        if (line) {\n            setAnswerText(blockId, answerId, textEdit);\n        } else {\n            setHeaderText(blockId, textEdit);\n        }\n    };\n\n    const handleOpenChangeColor = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseChangeColor = () => {\n        setAnchorEl(null);\n    };\n\n    const openChangeColor = Boolean(anchorEl);\n    const idChangeColor = openChangeColor ? 'change-color' : undefined;\n\n    useOnClickOutside(refBlock, () => setEditMode(false));\n\n    useEffect(() => {\n        if (editMode && refInput) {\n            refInput.current.focus();\n        }\n    }, [editMode]);\n\n    return (\n        <Box\n            ref={refBlock}\n            className={clsx(classes.lineWrapper, line && classes.lineSize)}\n            onMouseOver={() => setActionMode(true)}\n            onMouseLeave={() => {\n                if (!openChangeColor) setActionMode(false);\n            }}\n        >\n            {editMode\n                ? (\n                    <InputBase\n                        inputRef={refInput}\n                        multiline\n                        rowsMax={5}\n                        className={clsx(classes.inputStyle, extendedClass)}\n                        classes={{ input: classes.inputBaseRoot }}\n                        value={text}\n                        onChange={(event) => {\n                            handleTextEdit(event.target.value);\n                        }}\n                        onKeyDown={(event) => {\n                            if (event.keyCode === 13 && !event.shiftKey) {\n                                event.preventDefault();\n                                setEditMode(false);\n                            }\n                        }}\n                    />\n                )\n                : (\n                    <strong className={classes.textFieldWrapper} onDoubleClick={() => setEditMode(true)}>\n                        <Typography className={clsx(classes.textFieldStyle, extendedClass)}>{text}</Typography>\n                    </strong>\n                )}\n            {actionMode && !editMode && (\n                <Box className={classes.actionButtons} right={line ? theme.spacing(2) : 0}>\n                    <IconButton\n                        id={idChangeColor}\n                        className={classes.colorLineButton}\n                        onClick={handleOpenChangeColor}\n                    >\n                        <ColorLens fontSize=\"small\" />\n                    </IconButton>\n                    <IconButton\n                        className={classes.deleteLineButton}\n                        onClick={() => deleteHandler(line ? answerId : blockId)}\n                    >\n                        <Delete fontSize=\"small\" />\n                    </IconButton>\n                </Box>\n            )}\n            {line && (\n                <Box className={classes.connectorWrapper}>\n                    <Box\n                        className={clsx(classes.connector, deleteLineMode && classes.deleteLine)}\n                        id={answerId}\n                        onMouseDown={() => {\n                            if (!lines.find((item) => item.fromId.answerId === answerId)) {\n                                startAddingLine(blockId, answerId);\n                            }\n                        }}\n                        onMouseUp={() => {\n                            if (lineAddMode) {\n                                setLineAddMode(false);\n                            }\n                        }}\n                        onMouseEnter={() => {\n                            if (!lineAddMode && lines.find((item) => (item.fromId.answerId === answerId))) {\n                                setDeleteLineMode(true);\n                                setLineColor(answerId);\n                            }\n                        }}\n                        onMouseLeave={() => {\n                            if (!lineAddMode && deleteLineMode) {\n                                clearLineColor();\n                                setDeleteLineMode(false);\n                            }\n                        }}\n                        onDoubleClick={() => {\n                            if (deleteLineMode) {\n                                deleteLine(answerId);\n                                setDeleteLineMode(false);\n                            }\n                        }}\n                    />\n                </Box>\n            )}\n            <Popover\n                open={openChangeColor}\n                id={answerId}\n                anchorEl={anchorEl}\n                onClose={() => {\n                    handleCloseChangeColor();\n                    setActionMode(false);\n                }}\n                anchorOrigin={{ vertical: 'center', horizontal: 'center' }}\n                transformOrigin={{ vertical: 'center', horizontal: 'center' }}\n            >\n                <Paper>\n                    <RadioGroup\n                        className={classes.inputColorWrapper}\n                        value={color}\n                        onChange={(event) => {\n                            changeColor(event.target.value, answerId);\n                            handleCloseChangeColor();\n                            setActionMode(false);\n                        }}\n                    >\n                        {Object.keys(colors).filter((item) => item !== 'amber' && item !== 'common')\n                            .map((item) => (\n                                <Radio\n                                    value={item}\n                                    key={item}\n                                    className={classes.inputColor}\n                                    checkedIcon={<DoneOutline className={classes.inputColorIcon} />}\n                                    icon={<Box className={classes.inputColorIconUnchanged} />}\n                                    style={{ backgroundColor: colors[item][500] }}\n                                />\n                            ))}\n                    </RadioGroup>\n                </Paper>\n            </Popover>\n        </Box>\n    );\n}\n\nexport default observer(TextEditField);\n","import React, {\n    useRef, useEffect, useState, useContext,\n} from 'react';\nimport { Box, Paper, IconButton } from '@material-ui/core';\nimport { AddCircleOutlined } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Draggable from 'react-draggable';\nimport * as colors from '@material-ui/core/colors';\nimport { values, keys } from 'lodash';\nimport clsx from 'clsx';\nimport { observer } from 'mobx-react';\nimport TextEditField from './TextEditField';\nimport DiagramContext from '../../context/DiagramContext';\n\nconst useStyles = makeStyles((theme) => ({\n    blockWrapper: {\n        position: 'absolute',\n        minWidth: theme.spacing(25),\n        maxWidth: 'max-content',\n        maxHeight: 'max-content',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        backgroundColor: theme.palette.grey[200],\n        zIndex: 2,\n        '&:hover': {\n            cursor: 'move',\n        },\n    },\n    answerStyle: {\n        display: 'flex',\n        alignItems: 'center',\n        cursor: 'default',\n        position: 'relative',\n        borderTop: '1px solid rgba(0, 0, 0, 0.2)',\n        borderLeft: '1px solid rgba(0, 0, 0, 0.2)',\n        borderBottom: '1px solid rgba(0, 0, 0, 0.2)',\n        minHeight: theme.spacing(3.5),\n        marginBottom: theme.spacing(0.5),\n        paddingLeft: theme.spacing(1),\n        borderTopLeftRadius: theme.spacing(1),\n        borderBottomLeftRadius: theme.spacing(1),\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'column',\n        maxWidth: theme.spacing(36),\n        color: theme.palette.common.white,\n        padding: theme.spacing(1),\n        borderTopLeftRadius: theme.spacing(0.5),\n        borderTopRightRadius: theme.spacing(0.5),\n        cursor: 'default',\n        position: 'relative',\n    },\n    bodyStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        maxWidth: theme.spacing(38),\n        paddingTop: theme.spacing(0.5),\n    },\n    otherField: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n    },\n    addNewLineButton: {\n        padding: theme.spacing(0.5),\n        marginBottom: theme.spacing(0.5),\n    },\n    connectorWrapper: {\n        display: 'flex',\n        width: theme.spacing(1),\n        alignItems: 'center',\n        height: '100%',\n        position: 'absolute',\n        left: 0,\n    },\n    connector: {\n        height: theme.spacing(1.5),\n        width: '100%',\n        backgroundColor: theme.palette.grey[700],\n        borderTopRightRadius: theme.spacing(1),\n        borderBottomRightRadius: theme.spacing(1),\n        cursor: 'pointer',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[600],\n        },\n    },\n}));\n\nfunction DragBlock({\n    id,\n    parentRef,\n    zoomValue,\n    setHeightBlock,\n    setWidthBlock,\n    setHeightParentRef,\n    setWidthParentRef,\n}) {\n    const classes = useStyles();\n    const blockRef = useRef();\n    const headerRef = useRef();\n    const bodyRef = useRef();\n\n    const diagramState = useContext(DiagramContext);\n    const {\n        blocks,\n        lineAddMode,\n        lineFromBlockId,\n        clearLine,\n        addLine,\n        setPositionBlock,\n        setPositionsInBlock,\n        addNewAnswer,\n        deleteAnswer,\n        changeColorAnswer,\n        changeColorHeader,\n        deleteBlock,\n    } = diagramState;\n\n    const [isDrag, setIsDrag] = useState();\n\n    const onDragBlock = (e, pos) => {\n        const { x, y } = pos;\n        if (parentRef.clientHeight < blockRef.current?.clientHeight + y) {\n            setHeightParentRef(`${blockRef.current?.clientHeight + y}px`);\n            setWidthBlock(parentRef.clientWidth);\n            setHeightBlock(blockRef.current?.clientHeight + y);\n        }\n        if (parentRef.clientWidth < blockRef.current?.clientWidth + x) {\n            setWidthParentRef(`${blockRef.current?.clientWidth + x}px`);\n            setWidthBlock(blockRef.current?.clientWidth + x);\n            setHeightBlock(parentRef.clientHeight);\n        }\n        setPositionBlock(id, x, y);\n        setPositionsInBlock(id, x, y);\n    };\n\n    useEffect(() => {\n        setPositionsInBlock(id, blocks[id].position.x, blocks[id].position.y);\n    }, [headerRef.current?.clientHeight, bodyRef.current?.clientHeight, keys(blocks[id].answers).length]);\n\n    return (\n        <Draggable\n            position={blocks[id].position}\n            defaultPosition={blocks[id].position}\n            bounds={{\n                left: 0, top: 0, right: 5000, bottom: 5000,\n            }}\n            onDrag={onDragBlock}\n            handle=\"strong\"\n            scale={zoomValue}\n            onStart={() => setIsDrag(true)}\n            onStop={() => setIsDrag(false)}\n        >\n            <Paper\n                id={`block${id}`}\n                ref={blockRef}\n                className={clsx(classes.blockWrapper, isDrag && classes.draggingBlock)}\n            >\n                <Box\n                    id={`header${id}`}\n                    className={classes.headerStyle}\n                    style={{ backgroundColor: colors[blocks[id].header.color][500] }}\n                    ref={headerRef}\n                >\n                    <TextEditField\n                        text={blocks[id].header.text}\n                        color={blocks[id].header.color}\n                        blockId={id}\n                        deleteHandler={() => deleteBlock(id)}\n                        changeColor={(color) => changeColorHeader(id, color)}\n                    />\n                    <strong className={classes.otherField}>\n                        <Box />\n                    </strong>\n                </Box>\n                <Box className={classes.bodyStyle} ref={bodyRef}>\n                    <strong className={classes.otherField}>\n                        <IconButton className={classes.addNewLineButton} onClick={() => addNewAnswer(id)}>\n                            <AddCircleOutlined fontSize=\"small\" color=\"primary\" />\n                        </IconButton>\n                    </strong>\n                    <Box display=\"flex\" flexDirection=\"column\" width=\"90%\">\n                        {values(blocks[id].answers).map((item) => (\n                            <Box\n                                id={`answer${item.id}`}\n                                className={classes.answerStyle}\n                                key={item.id}\n                                style={{ backgroundColor: colors[item.color][500] }}\n                            >\n                                <TextEditField\n                                    text={item.text}\n                                    line\n                                    answerId={item.id}\n                                    blockId={id}\n                                    color={item.color}\n                                    deleteHandler={(answerId) => deleteAnswer(id, answerId)}\n                                    changeColor={(color, answerId) => changeColorAnswer(id, answerId, color)}\n                                />\n                            </Box>\n                        ))}\n                    </Box>\n                </Box>\n                <Box className={classes.connectorWrapper}>\n                    <Box\n                        className={classes.connector}\n                        id={id}\n                        onMouseUp={() => {\n                            if (lineAddMode) {\n                                if (lineFromBlockId !== id) {\n                                    addLine(id);\n                                } else {\n                                    clearLine();\n                                }\n                            }\n                        }}\n                    />\n                </Box>\n            </Paper>\n        </Draggable>\n    );\n}\n\nexport default observer(DragBlock);\n","import React, {\n    useContext, useEffect, useRef, useState,\n} from 'react';\nimport {\n    Box, Paper, Typography, IconButton, Tooltip,\n} from '@material-ui/core';\nimport { AddBox as AddBoxIcon } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as colors from '@material-ui/core/colors';\nimport { observer } from 'mobx-react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport { values } from 'lodash';\nimport DragBlock from './DragBlock';\nimport DiagramContext from '../../context/DiagramContext';\n\nconst useStyles = makeStyles((theme) => ({\n    rootWrapper: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: theme.palette.divider,\n    },\n    wrapper: {\n        width: `calc(100% - ${theme.spacing(8)}px)`,\n        height: `calc(100% - ${theme.spacing(8)}px)`,\n        position: 'absolute',\n        margin: theme.spacing(4),\n        overflow: 'auto',\n        '&::-webkit-scrollbar': {\n            width: theme.spacing(1),\n            height: theme.spacing(1),\n        },\n        '&::-webkit-scrollbar-thumb': {\n            backgroundColor: '#BEBEBE',\n            borderRadius: theme.spacing(0.5),\n        },\n    },\n    diagramField: {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        zIndex: 2,\n    },\n    diagramCanvas: {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        zIndex: 0,\n    },\n    infoWrapper: {\n        position: 'absolute',\n        right: theme.spacing(7),\n        top: theme.spacing(7),\n        zIndex: 1000,\n        padding: theme.spacing(1),\n    },\n    addBlockButton: {\n        position: 'absolute',\n        left: theme.spacing(5),\n        top: theme.spacing(5),\n        zIndex: 1000,\n        color: colors.green[500],\n    },\n}));\n\nfunction Diagram() {\n    const classes = useStyles();\n\n    const boxRef = useRef();\n    const wrapperRef = useRef();\n    const diagramState = useContext(DiagramContext);\n    const {\n        blocks,\n        lines,\n        lineAddMode,\n        addNewBlock,\n        clearLine,\n        setPositionLine,\n    } = diagramState;\n\n    const [widthBlock, setWidthBlock] = useState(0);\n    const [heightBlock, setHeightBlock] = useState(0);\n    const [moveMode, setMoveMode] = useState(false);\n    const [zoomValue, setZoomValue] = useState(1);\n\n    const setSizeBlock = () => {\n        if (boxRef.current?.clientWidth || boxRef.current?.clientHeight) {\n            setWidthBlock(boxRef.current?.clientWidth);\n            setHeightBlock(boxRef.current?.clientHeight);\n        }\n    };\n\n    useEffect(() => {\n        setSizeBlock();\n    }, [boxRef]);\n\n    return (\n        <Box className={classes.rootWrapper}>\n            <Paper\n                className={classes.wrapper}\n                style={{ cursor: moveMode ? 'move' : 'default' }}\n                ref={wrapperRef}\n                onMouseDown={(event) => {\n                    if (event.button === 1) {\n                        event.preventDefault();\n                        setMoveMode(true);\n                    }\n                }}\n                onMouseUp={(event) => {\n                    clearLine();\n                    if (event.button === 1) {\n                        setMoveMode(false);\n                    }\n                }}\n                onMouseMove={(event) => {\n                    if (lineAddMode) {\n                        setPositionLine(event.movementX / zoomValue, event.movementY / zoomValue);\n                    }\n                    if (moveMode) {\n                        wrapperRef.current.scrollLeft = wrapperRef.current?.scrollLeft - event.movementX;\n                        wrapperRef.current.scrollTop = wrapperRef.current?.scrollTop - event.movementY;\n                    }\n                }}\n                onMouseLeave={() => {\n                    setMoveMode(false);\n                }}\n            >\n                <Box\n                    className={classes.diagramField}\n                    style={{ zoom: zoomValue }}\n                    id=\"diagramField\"\n                    ref={boxRef}\n                    onWheel={(event) => {\n                        const value = ((zoomValue - event.deltaY / 10000) * 100).toFixed(0);\n                        if (value >= 50 && value <= 150) {\n                            setZoomValue(zoomValue - event.deltaY / 10000);\n                            setSizeBlock();\n                        }\n                    }}\n                >\n                    {values(blocks).map((item) => (\n                        <DragBlock\n                            key={item.id}\n                            id={item.id}\n                            parentRef={boxRef.current}\n                            zoomValue={zoomValue}\n                            setWidthBlock={setWidthBlock}\n                            setHeightBlock={setHeightBlock}\n                            setHeightParentRef={(height) => {\n                                boxRef.current.style.height = height;\n                            }}\n                            setWidthParentRef={(width) => {\n                                boxRef.current.style.width = width;\n                            }}\n                        />\n                    ))}\n                    <Stage\n                        className={classes.diagramCanvas}\n                        width={widthBlock}\n                        height={heightBlock}\n                    >\n                        <Layer>\n                            {lines.map((line) => (\n                                <Line\n                                    key={`line${line.fromId.answerId}`}\n                                    points={[\n                                        line.fromId.position.x,\n                                        line.fromId.position.y,\n                                        line.toId.position.x,\n                                        line.toId.position.y,\n                                    ]}\n                                    tension={5}\n                                    stroke={colors[line.color][700]}\n                                />\n                            ))}\n                        </Layer>\n                    </Stage>\n                </Box>\n            </Paper>\n            <Paper className={classes.infoWrapper}>\n                <Typography>{`Масштаб: ${(zoomValue * 100).toFixed(0)}%`}</Typography>\n            </Paper>\n            <Tooltip title=\"Добавить новый блок\">\n                <IconButton\n                    className={classes.addBlockButton}\n                    onClick={() => {\n                        addNewBlock(`in${Date.now()}`);\n                    }}\n                >\n                    <AddBoxIcon fontSize=\"large\" />\n                </IconButton>\n            </Tooltip>\n        </Box>\n    );\n}\n\nexport default observer(Diagram);\n","import { action, computed, observable } from 'mobx';\nimport { values } from 'lodash';\n\nexport default class DiagramState {\n    @observable blocks = {};\n    @observable lines = [];\n    @observable lineAddMode = false;\n    @observable lineFromBlockId = '';\n    @observable lineFromAnswerId = '';\n\n    @computed get getBlocks() {\n        return values(this.blocks);\n    }\n\n    @action.bound\n    addNewBlock(id) {\n        this.blocks[id] = {\n            id,\n            header: {\n                text: 'Введите текст вопроса',\n                color: 'deepOrange',\n            },\n            inPosition: { x: 0, y: 0 },\n            answers: {},\n            position: { x: 100, y: 50 },\n        };\n    }\n\n    @action.bound\n    setLineAddMode(mode) {\n        this.lineAddMode = mode;\n    }\n\n    @action.bound\n    setLineColor(answerId) {\n        this.lines = this.lines.map((item) => ({\n            ...item,\n            color: item.fromId.answerId === answerId ? 'deepOrange' : item.color,\n        }));\n    }\n\n    @action.bound\n    clearLineColor() {\n        this.lines = this.lines.map((item) => ({\n            ...item,\n            color: 'grey',\n        }));\n    }\n\n    @action.bound\n    clearLine() {\n        this.lineAddMode = false;\n        this.lineFromAnswerId = '';\n        this.lineFromBlockId = '';\n        this.lines = this.lines.filter((line) => !!line.toId.blockId);\n    }\n\n    @action.bound\n    deleteLine(answerId) {\n        this.lines = this.lines.filter((item) => item.fromId.answerId !== answerId);\n    }\n\n    @action.bound\n    startAddingLine(blockId, answerId) {\n        this.lineFromBlockId = blockId;\n        this.lineFromAnswerId = answerId;\n        this.lineAddMode = true;\n        this.lines.push({\n            fromId: { blockId, answerId, position: this.blocks[blockId].answers[answerId].position },\n            toId: { blockId: '', position: this.blocks[blockId].answers[answerId].position },\n            color: 'lightBlue',\n        });\n    }\n\n    @action.bound\n    addLine(id) {\n        this.lines = this.lines.map((line) => ({\n            ...line,\n            toId: {\n                ...line.toId,\n                blockId: line.fromId.answerId === this.lineFromAnswerId\n                    ? id\n                    : line.toId.blockId,\n                position: line.fromId.answerId === this.lineFromAnswerId\n                    ? this.blocks[id].inPosition\n                    : line.toId.position,\n            },\n            color: 'grey',\n        }));\n        this.lineAddMode = false;\n        this.lineFromAnswerId = '';\n        this.lineFromBlockId = '';\n    }\n\n    @action.bound\n    setPositionLine(x, y) {\n        this.lines = this.lines.map((line) => ({\n            ...line,\n            toId: {\n                ...line.toId,\n                position: line.fromId.answerId === this.lineFromAnswerId\n                    ? {\n                        x: line.toId.position.x + x,\n                        y: line.toId.position.y + y,\n                    }\n                    : line.toId.position,\n            },\n        }));\n    }\n\n    @action.bound\n    setPositionBlock(id, x, y) {\n        this.blocks[id].position = { x, y };\n    }\n\n    @action.bound\n    setPositionsInBlock(id, x, y) {\n        this.blocks[id].inPosition = { x, y: y + document.getElementById(`block${id}`).clientHeight * 0.5 };\n        this.lines = this.lines.map((line) => ({\n            ...line,\n            toId: {\n                ...line.toId,\n                position: line.toId.blockId === id\n                    ? { x, y: y + document.getElementById(`block${id}`).clientHeight * 0.5 }\n                    : line.toId.position,\n            },\n        }));\n        values(this.blocks[id].answers).forEach((answer, key) => {\n            const xPos = x + document.getElementById(`block${id}`).clientWidth;\n            const yPos = y + document.getElementById(`header${id}`).clientHeight\n                + Object.keys(this.blocks[id].answers).slice(0, key + 1).reduce((acc, item) => (\n                    acc + 6 + document.getElementById(`answer${item}`).clientHeight\n                ), 0)\n                - document.getElementById(`answer${answer.id}`).clientHeight * 0.5;\n            this.blocks[id].answers[answer.id].position = { x: xPos, y: yPos };\n            this.lines = this.lines.map((line) => ({\n                ...line,\n                fromId: {\n                    ...line.fromId,\n                    position: line.fromId.answerId === answer.id ? { x: xPos, y: yPos } : line.fromId.position,\n                },\n            }));\n        });\n    }\n\n    @action.bound\n    addNewAnswer(id) {\n        this.blocks[id].answers[`out${Date.now()}`] = {\n            id: `out${Date.now()}`,\n            text: 'Текст ответа',\n            color: 'yellow',\n        };\n    }\n\n    @action.bound\n    deleteAnswer(id, answerId) {\n        this.lines = this.lines.filter((line) => line.fromId.answerId !== answerId);\n        delete this.blocks[id].answers[answerId];\n    }\n\n    @action.bound\n    changeColorAnswer(id, answerId, color) {\n        this.blocks[id].answers[answerId].color = color;\n    }\n\n    @action.bound\n    changeColorHeader(id, color) {\n        this.blocks[id].header.color = color;\n    }\n\n    @action.bound\n    deleteBlock(id) {\n        this.lines = this.lines.filter((line) => (\n            (line.fromId.blockId !== id) && (line.toId.blockId !== id)\n        ));\n        delete this.blocks[id];\n    }\n\n    @action.bound\n    setAnswerText(id, answerId, text) {\n        this.blocks[id].answers[answerId].text = text;\n    }\n\n    @action.bound\n    setHeaderText(id, text) {\n        this.blocks[id].header.text = text;\n    }\n\n}\n","import React from 'react';\nimport { observer, useLocalStore } from 'mobx-react';\nimport DiagramContext from '../context/DiagramContext';\nimport DiagramState from '../state/DiagramState';\n\nfunction DiagramProvider({ children }) {\n    const data = useLocalStore(() => new DiagramState());\n\n    return (\n        <DiagramContext.Provider value={data}>\n            {children}\n        </DiagramContext.Provider>\n    );\n}\n\nexport default observer(DiagramProvider);\n","import React from 'react';\nimport {\n    Route, Redirect, BrowserRouter, Switch,\n} from 'react-router-dom';\nimport Providers from './utils/Providers';\nimport Diagram from './pages/Diagram';\nimport DiagramProvider from './providers/DiagramProvider';\nimport './App.css';\n\nfunction App() {\n    return (\n        <Providers\n            components={[\n                BrowserRouter,\n                Switch,\n                DiagramProvider,\n            ]}\n        >\n            <Route exact path=\"/diagram\" component={Diagram} />\n            <Redirect from=\"/\" to=\"/diagram\" />\n        </Providers>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}